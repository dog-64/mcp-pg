#!/bin/bash

# MCP PostgreSQL Server на bash + psql

# Добавляем путь к PostgreSQL в PATH
export PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"

# Определяем полный путь к psql
PSQL_PATH=$(which psql)
if [ -z "$PSQL_PATH" ]; then
    echo "Ошибка: psql не найден в системе" >&2
    exit 1
fi

# Функция для загрузки переменных из .env файла
load_env() {
    if [ -f .env ]; then
        # Читаем .env файл и экспортируем переменные
        while IFS='=' read -r key value; do
            # Пропускаем комментарии и пустые строки
            [[ -z "$key" || "$key" =~ ^[[:space:]]*# ]] && continue
            
            # Убираем пробелы и кавычки
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs | sed 's/^["'\'']\|["'\'']$//g')
            
            # Экспортируем переменную
            export "$key"="$value"
        done < .env
    fi
}

# Загружаем переменные окружения
load_env

# Функция для логирования
log() {
    echo "$1" >&2
}

# Функция для отправки JSON ответа
send_response() {
    echo "$1"
}

# Функция для создания успешного ответа с текстом
send_success_response() {
    local id="$1"
    local text="$2"
    cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $id,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "$text"
      }
    ]
  }
}
EOF
}

# Функция для создания ответа с ошибкой
send_error_response() {
    local id="$1"
    local error_text="$2"
    cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $id,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "❌ $error_text"
      }
    ]
  }
}
EOF
}

# Функция для выполнения SQL
execute_sql() {
    local connection="$1"
    local query="$2"
    local database="$3"
    
    # Получаем параметры подключения (приводим к верхнему регистру)
    local connection_upper=$(echo "$connection" | tr '[:lower:]' '[:upper:]')
    
    local host_var="DB_${connection_upper}_HOST"
    local port_var="DB_${connection_upper}_PORT"
    local name_var="DB_${connection_upper}_NAME"
    local user_var="DB_${connection_upper}_USER"
    local pass_var="DB_${connection_upper}_PASSWORD"
    
    # Используем eval для получения значений переменных
    local host=$(eval echo \$$host_var)
    local port=$(eval echo \$$port_var)
    local dbname=$(eval echo \$$name_var)
    local user=$(eval echo \$$user_var)
    local password=$(eval echo \$$pass_var)
    
    # Если передана database, используем её вместо настройки из .env
    if [ -n "$database" ]; then
        dbname="$database"
    fi
    
    # Устанавливаем порт по умолчанию
    [ -z "$port" ] && port="5432"
    
    log "Подключение $connection: host=$host, port=$port, db=$dbname, user=$user"
    
    if [ -z "$host" ] || [ -z "$dbname" ] || [ -z "$user" ]; then
        echo "Соединение '$connection' не настроено (отсутствуют host/db/user)"
        return 1
    fi
    
    # Проверяем режим безопасности для конкретного подключения
    local readonly_var="DB_${connection_upper}_READONLY"
    local readonly_mode=$(eval echo \$$readonly_var)
    
    if [ "$readonly_mode" = "true" ]; then
        if echo "$query" | grep -iq '\b\(INSERT\|UPDATE\|DELETE\|DROP\|CREATE\|ALTER\|TRUNCATE\)\b'; then
            echo "READONLY режим для $connection: разрешены только SELECT запросы"
            return 1
        fi
    fi
    
    # Выполняем запрос
    # Проверяем наличие psql в разных местах
    local psql_cmd=""
    if [ -n "$PSQL_PATH" ] && [ -x "$PSQL_PATH" ]; then
        psql_cmd="$PSQL_PATH"
    elif command -v psql >/dev/null 2>&1; then
        psql_cmd="psql"
    elif [ -x "/Applications/Postgres.app/Contents/Versions/latest/bin/psql" ]; then
        psql_cmd="/Applications/Postgres.app/Contents/Versions/latest/bin/psql"
    else
        echo "psql не найден в системе"
        return 1
    fi
    
    if [ -n "$password" ]; then
        PGPASSWORD="$password" "$psql_cmd" -h "$host" -p "$port" -U "$user" -d "$dbname" -t -A -c "$query" 2>&1
    else
        "$psql_cmd" -h "$host" -p "$port" -U "$user" -d "$dbname" -t -A -c "$query" 2>&1
    fi
}

# Функция для проверки соединения
check_connection() {
    local connection="$1"
    local database="$2"  # Новый параметр для базы данных
    local result
    result=$(execute_sql "$connection" "SELECT version(), current_database(), current_user" "$database")
    
    if [ $? -eq 0 ]; then
        echo "ok"
    else
        echo "error: $result"
    fi
}

# Функция для быстрого подсчета строк в таблице
count_table_rows() {
    local connection="$1"
    local table_name="$2"
    local database="$3"
    local result
    
    # Запрос к системному каталогу для быстрого получения приблизительного количества строк
    local query="SELECT reltuples::bigint as estimated_rows FROM pg_catalog.pg_class WHERE relname = '$table_name'"
    result=$(execute_sql "$connection" "$query" "$database")
    
    if [ $? -eq 0 ]; then
        if [ -z "$result" ] || [ "$result" = "" ]; then
            echo "Таблица '$table_name' не найдена"
            return 1
        else
            echo "$result"
        fi
    else
        echo "error: $result"
        return 1
    fi
}

log "MCP PostgreSQL Server started"

# Основной цикл обработки запросов
while IFS= read -r line; do
    [ -z "$line" ] && break
    
    # Простой парсинг JSON для получения method и id
    method=$(echo "$line" | sed -n 's/.*"method"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')
    id=$(echo "$line" | sed -n 's/.*"id"[[:space:]]*:[[:space:]]*\([^,}]*\).*/\1/p')
    
    # Очищаем ID от лишних пробелов
    id=$(echo "$id" | sed 's/^[[:space:]]*\(.*\)[[:space:]]*$/\1/')
    
    # Определяем тип ID и формируем правильное значение для JSON
    if [ -z "$id" ] || [ "$id" = "null" ]; then
        id="1"
        json_id="$id"
    elif echo "$id" | grep -q '^".*"$'; then
        # Строковый ID - оставляем кавычки
        json_id="$id"
        id=$(echo "$id" | sed 's/^"\(.*\)"$/\1/')
    else
        # Числовой ID - без кавычек, очищаем от пробелов
        json_id="$id"
    fi
    
    case "$method" in
        "initialize")
            # Ответ на инициализацию MCP сервера
            cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $json_id,
  "result": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "tools": {}
    },
    "serverInfo": {
      "name": "mcp-postgres-bash",
      "version": "1.0.0",
      "description": "PostgreSQL MCP server на bash + psql. Поддерживает множественные подключения, безопасные SELECT запросы, без зависимостей."
    }
  }
}
EOF
            ;;
        "notifications/initialized")
            # Уведомление о том, что клиент инициализирован - ответ не требуется
            log "Client initialized notification received"
            ;;
        "tools/list")
            # Определяем статус безопасности для каждого подключения
            local_readonly=$(eval echo \$DB_LOCAL_READONLY)
            docker_readonly=$(eval echo \$DB_DOCKER_READONLY) 
            prod_readonly=$(eval echo \$DB_PROD_READONLY)
            
            security_desc="Режимы безопасности: local=$([ "$local_readonly" = "true" ] && echo "READONLY" || echo "FULL"), docker=$([ "$docker_readonly" = "true" ] && echo "READONLY" || echo "FULL"), prod=$([ "$prod_readonly" = "true" ] && echo "READONLY" || echo "FULL")."
            
            # Генерируем читаемый JSON ответ с инструментами
            cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $json_id,
  "result": {
    "tools": [
      {
        "name": "execute_sql",
        "description": "Выполнить SQL запрос через psql. $security_desc Использует нативный psql клиент PostgreSQL 16.0+. Реализация на bash без зависимостей - быстрая и надёжная.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "connection": {
              "type": "string",
              "description": "Имя соединения (local, docker, prod)"
            },
            "database": {
              "type": "string", 
              "description": "Имя базы данных (опционально, переопределяет значение по умолчанию из .env)"
            },
            "query": {
              "type": "string",
              "description": "SQL запрос (поддерживается стандартный синтаксис PostgreSQL)"
            }
          },
          "required": ["connection", "query"]
        }
      },
      {
        "name": "check_connection",
        "description": "Проверить подключение к PostgreSQL серверу. Тестирует доступность сервера и базы данных через psql.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "connection": {
              "type": "string",
              "description": "Имя соединения (local, docker, prod)"
            },
            "database": {
              "type": "string",
              "description": "Имя базы данных для проверки (опционально)"
            }
          },
          "required": ["connection"]
        }
      },
      {
        "name": "count_table_rows",
        "description": "Быстрый подсчет строк в таблице через системный каталог PostgreSQL (pg_catalog.pg_class). Возвращает приблизительное количество строк - значительно быстрее чем COUNT(*) для больших таблиц. Использует reltuples для оценки. Для точного подсчета рекомендуется предварительно выполнить ANALYZE table_name для обновления статистики.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "connection": {
              "type": "string",
              "description": "Имя соединения (local, docker, prod)"
            },
            "table_name": {
              "type": "string",
              "description": "Имя таблицы для подсчета строк"
            },
            "database": {
              "type": "string",
              "description": "Имя базы данных (опционально)"
            }
          },
          "required": ["connection", "table_name"]
        }
      }
    ]
  }
}
EOF
            ;;
        "tools/call")
            # Извлекаем имя инструмента и аргументы
            tool_name=$(echo "$line" | sed -n 's/.*"name":"\([^"]*\)".*/\1/p')
            connection=$(echo "$line" | sed -n 's/.*"connection":"\([^"]*\)".*/\1/p')
            database=$(echo "$line" | sed -n 's/.*"database":"\([^"]*\)".*/\1/p')
            table_name=$(echo "$line" | sed -n 's/.*"table_name":"\([^"]*\)".*/\1/p')
            
            case "$tool_name" in
                "execute_sql")
                    query=$(echo "$line" | sed -n 's/.*"query":"\([^"]*\)".*/\1/p')
                    result=$(execute_sql "$connection" "$query" "$database")
                    if [ $? -eq 0 ]; then
                        # Улучшенное экранирование результата для JSON
                        escaped_result=$(echo "$result" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/\t/\\t/g' | sed 's/\r/\\r/g' | tr '\n' '|' | sed 's/|$//')
                        send_success_response "$json_id" "$escaped_result"
                    else
                        # Улучшенное экранирование ошибок для JSON
                        escaped_error=$(echo "$result" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/\t/\\t/g' | sed 's/\r/\\r/g' | tr '\n' ' ' | sed 's/  */ /g' | sed 's/^ *//' | sed 's/ *$//')
                        send_error_response "$json_id" "Ошибка: $escaped_error"
                    fi
                    ;;
                "check_connection")
                    result=$(check_connection "$connection" "$database")
                    if [[ "$result" == "ok" ]]; then
                        send_success_response "$json_id" "✅ Соединение работает"
                    else
                        # Улучшенное экранирование ошибок для JSON
                        escaped_error=$(echo "$result" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/\t/\\t/g' | sed 's/\r/\\r/g' | tr '\n' ' ' | sed 's/  */ /g' | sed 's/^ *//' | sed 's/ *$//')
                        send_error_response "$json_id" "$escaped_error"
                    fi
                    ;;
                "count_table_rows")
                    result=$(count_table_rows "$connection" "$table_name" "$database")
                    if [ $? -eq 0 ] && [[ ! "$result" =~ ^error: ]]; then
                        success_text="📊 Приблизительное количество строк в таблице '$table_name': $result

💡 Примечание: Используется системный каталог PostgreSQL (pg_catalog.pg_class.reltuples) для быстрого подсчета. Значение приблизительное и обновляется после VACUUM/ANALYZE.

🔧 Для точного подсчета выполните: ANALYZE $table_name; затем повторите запрос."
                        send_success_response "$json_id" "$success_text"
                    else
                        # Улучшенное экранирование ошибок для JSON
                        escaped_error=$(echo "$result" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/\t/\\t/g' | sed 's/\r/\\r/g' | tr '\n' ' ' | sed 's/  */ /g' | sed 's/^ *//' | sed 's/ *$//')
                        send_error_response "$json_id" "$escaped_error"
                    fi
                    ;;
                *)
                    # Ответ с ошибкой для неизвестного инструмента
                    cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $json_id,
  "error": {
    "code": -32601,
    "message": "Unknown tool: $tool_name"
  }
}
EOF
                    ;;
            esac
            ;;
        *)
            if [ -n "$method" ]; then
                # Ответ с ошибкой для неизвестного метода
                cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $json_id,
  "error": {
    "code": -32601,
    "message": "Method not found: $method"
  }
}
EOF
            fi
            ;;
    esac
done 